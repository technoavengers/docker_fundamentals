###################### Run Container from an image ######################
docker run  httpd

###################### Run Container & assign it a name ######################
docker run -name httpd-new httpd

###################### Run Container in detached mode ######################
docker run -d httpd

###################### Map a specific Port ##################################
docker run -d -p 8080:80 --name  httpd-new httpd


###################### Map all ports ##################################
docker run -d -P --name  httpd-new httpd

################## Pull and run a specific Version ################################
docker run -d -p 8081:80 --name  httpd-new httpd:alpine3.14

##################  List of running Container #############################
docker ps

##################  List of all Container #############################
docker ps -a

##################### Stop Container ############################
docker stop <container_id>

##################### Start Container ############################
docker start <container_id>

################## Remove Container ##############################
docker rm <container_id>

################## Remove a running Container ##############################
docker rm -f <container_id>

################## Start a shell inside the container  ##############################
docker exec -it <container_id> sh

################## Copy a file from container to host ##############################
docker cp <container_id>:/usr/local/apache2/logs/httpd.pid httpd-new.pid

################## Copy a file from host to container ##############################
docker cp httpd-new.pid <container_id>:/usr/local/apache2/logs


######################## Setting up an environment variable ###################
docker run -e LOCATION=US mywebapp

######################### Container communication in custom network #################
docker network create custom_network
docker run -d --name httpd_net --network custom_network httpd
docker run -d --name nginx_net --network custom_network nginx
docker exec -it nginx_net sh
curl httpd_net:80
docker inspect container nginx_net
docker inspect network custom_network
brctl show (bridge-utils)

################## Checking container network interface & Ip #################
docker run -d --name httpd_bridge httpd 
docker exec -it httpd_bridge sh
apt-get update && apt-get install net-tools
ifconfig
route -n

################## Host network #################
docker run -d --name httpd_host --network host httpd
apt-get update && apt-get install net-tools 
ifconfig
netstat -ntlp

docker run -d --name httpd_bridge  httpd 
docker exec -it httpd_bridge sh
apt-get update && apt-get install net-tools
ifconfig
netstat -ntlp